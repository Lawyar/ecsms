#pragma once

#include <memory>
#include <vector>
#include <optional>

//------------------------------------------------------------------------------
/**
  Режим открытия файла
*/
//---
enum class FileOpenMode
{
	Read,  ///< Открыть файл на чтение. Если файл не существует, вернется ошибка.
	       ///< (Поведение аналогично параметру "r" функции std::fopen)
	Write, ///< Открыть файл на запись. Если файл не существует, то будет произведена попытка его создания.
	       ///< Если файл существует, то он будет перезаписан.
		   ///< (Поведение аналогично параметру "w" функции std::fopen)
	Append ///< Открыть файл на дозапись. Если файл не существует, то будет произведена попытка его создания.
	       ///< Если файл существует, то данные будут записываться в его конец.
	       ///< (Поведение аналогично параметру "a" функции std::fopen)
};


//------------------------------------------------------------------------------
/**
  Интерфейс файла.
  ПРЕДУПРЕЖДЕНИЕ: Все неконстантные методы интерфейса должны вызываться в рамках транзакции,
  иначе будут возвращать признак ошибки.
*/
//---
class IFile
{
public:
	virtual ~IFile() = default;

public:
	/// Получить имя файла
	virtual std::string GetFileName() const = 0;
	/// Открыть файл
	/// \param openMode Режим открытия
	/// \return Статус выполнения операции
	virtual bool Open(FileOpenMode openMode) = 0;
	/// Закрыть файл
	/// Файл, оставшийся открытым в конце транзакции, будет закрыт автоматически
	/// \return Статус выполнения операции
	virtual bool Close() = 0;
	/// Попытаться прочесть байты
	/// \param count Количество байт, которое требуется попытаться прочесть.
	/// \param buffer Буфер, в который требуется прочитать байты.
	///   Результат будет дописан в конец этого буфера.
	///   Если в буфер было записано менее, чем count байтов, это может свидельствовать о том,
	///   что файл закончился, или о том, что произошла ошибка.
	/// \return Статус выполнения операции.
	virtual bool ReadBytes(size_t count, std::vector<char> & buffer) = 0;
	/// Попытаться записать байты
	/// \param data Массив байтов, который требуется записать.
	/// \param numberOfBytesWritten Количество успешно записанных байтов.
	/// \return Статус выполнения операции.
	virtual bool WriteBytes(const std::vector<char> & data, size_t * numberOfBytesWritten = nullptr) = 0;
};

/// Указатель на IFile
using IFilePtr = std::shared_ptr<IFile>;
